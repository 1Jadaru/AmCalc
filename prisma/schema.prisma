// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String    @unique @db.VarChar(255)
  password_hash  String    @db.VarChar(255)
  first_name     String?   @db.VarChar(100)
  last_name      String?   @db.VarChar(100)
  is_active      Boolean   @default(true)
  email_verified Boolean   @default(false)
  last_login     DateTime? @db.Timestamp(6)
  created_at     DateTime  @default(now()) @db.Timestamp(6)
  updated_at     DateTime  @updatedAt @db.Timestamp(6)
  projects       Project[]
  sessions       UserSession[]
  passwordResets PasswordReset[]

  @@index([email], name: "idx_users_email")
}

model Project {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String     @db.Uuid
  name        String     @db.VarChar(255)
  description String?
  is_archived Boolean    @default(false)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @updatedAt @db.Timestamp(6)
  user        User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  scenarios   Scenario[]

  @@index([user_id], name: "idx_projects_user_id")
  @@index([is_archived], name: "idx_projects_archived")
}

model Scenario {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  project_id            String   @db.Uuid
  name                  String   @db.VarChar(255)
  principal             Decimal  @db.Decimal(15,2)
  interest_rate         Decimal  @db.Decimal(5,4)
  term_years            Int
  payment_frequency     String   @default("monthly") @db.VarChar(20)
  start_date            DateTime? @db.Date
  payment_amount        Decimal? @db.Decimal(15,2)
  total_interest        Decimal? @db.Decimal(15,2)
  total_payments        Decimal? @db.Decimal(15,2)
  amortization_schedule Json?
  metadata              Json?
  created_at            DateTime @default(now()) @db.Timestamp(6)
  updated_at            DateTime @updatedAt @db.Timestamp(6)
  project               Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)

  @@index([project_id], name: "idx_scenarios_project_id")
  @@index([created_at], name: "idx_scenarios_created_at")
}

model UserSession {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token_hash String   @db.VarChar(255)
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_user_sessions_user_id")
  @@index([expires_at], name: "idx_user_sessions_expires_at")
}

model PasswordReset {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  token_hash String   @db.VarChar(255)
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], name: "idx_password_resets_user_id")
  @@index([expires_at], name: "idx_password_resets_expires_at")
}
